@model tasky.ViewModels.StoryViewModel

@{
    ViewBag.Title = "Details";
}

<div class="cornerContainer">
    <div class="cornerHeader">@Html.DisplayFor(model => model.title)</div>
            
    <span class="cornerContent">
    @Html.DisplayNameFor(model => model.sprintViewModel.title):
    @Html.ActionLink((string)Model.sprintViewModel.title, "Details", "Sprint", new {id = Model.sprintViewModel.id}, null)
    </span>

    <span class="cornerContent">
    @Html.DisplayNameFor(model => model.points):
    @Html.DisplayFor(model => model.points)
    </span>

    <span class="cornerContent">
    @Html.DisplayNameFor(model => model.status):
    @Html.DisplayFor(model => model.status)
    </span>

    <span class="cornerContent">
    @Html.DisplayNameFor(model => model.description):
    @Html.DisplayFor(model => model.description)
    </span>

    <br />

    <span class="cornerContent">
    @Html.ActionLink("Edit", "Edit", new { id=Model.id }) |
    @Html.ActionLink("Delete", "Delete", new { id=Model.id })
    @Html.ActionLink("New Task", "Create", "Task")
    </span>

    <div class="taskList">

        <!-- List out tasks using Backbone here -->
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
        var taskdata = @Html.Raw(Json.Encode(Model.tasks))
        /*
            [
            {title: "hi"},
            {title: "hi2"},
            {title: "hi3"}
        ];
        */

        var c = new TaskList(taskdata);
        console.log(c);

        $(document).on("ready", function() {
            var taskView = new TaskListView({ items: c, el:$(".taskList") })
            taskView.render();

        });
    </script>
}